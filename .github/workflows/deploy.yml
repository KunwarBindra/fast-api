name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests
        run: |
          pytest tests/

  build_and_push:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t kunwarjeetbindra/fast-api:latest .
          docker push kunwarjeetbindra/fast-api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          port: ${{ secrets.EC2_PORT }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Git if not present
            sudo yum install -y git || sudo apt update && sudo apt install -y git

            # Navigate to the project directory or clone if it doesn't exist
            cd /home/${{ secrets.EC2_USER }} || exit 1
            if [ ! -d "fast-api" ]; then
              git clone https://github.com/KunwarBindra/fast-api
            else
              cd fast-api
              git pull origin main
            fi
            
            # Move to the project directory
            cd /home/${{ secrets.EC2_USER }}/fast-api

            # Use Docker Compose to manage the containers
            docker-compose down
            docker-compose pull
            docker-compose up -d --build

            # Clean up unused Docker images
            docker image prune -f
